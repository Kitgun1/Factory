//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Factory
{
    public partial class @Input : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Input()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""PlayerInput"",
            ""id"": ""133a8854-1c5a-413b-b55c-ee493b999d0b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4c5bd802-0477-4546-b67c-b8ac75ae2067"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CloseAnyMenu"",
                    ""type"": ""Button"",
                    ""id"": ""9d6215b2-0454-4865-9bae-ba1e64c67311"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CellMenu"",
                    ""type"": ""Button"",
                    ""id"": ""f380c60b-80e7-479a-90b0-6986ad5a95d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1bd6c4f9-166d-4d66-8b07-4cc16bcbf0f1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""CloseAnyMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13097071-d78d-4351-b21a-4c652a5d9dcb"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""CellMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""42df568c-65c4-4cf9-83df-583493062e62"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""65e747d4-096f-46c8-901f-a3bf25860eb5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d2c8b1b7-a62d-4df3-8a8c-296fdae6585a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cbaeaba5-2fa2-415e-ab72-8fc468e8903a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""711e6718-15ad-40c7-9e32-af2c77f35d02"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse and Keyboard"",
            ""bindingGroup"": ""Mouse and Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // PlayerInput
            m_PlayerInput = asset.FindActionMap("PlayerInput", throwIfNotFound: true);
            m_PlayerInput_Move = m_PlayerInput.FindAction("Move", throwIfNotFound: true);
            m_PlayerInput_CloseAnyMenu = m_PlayerInput.FindAction("CloseAnyMenu", throwIfNotFound: true);
            m_PlayerInput_CellMenu = m_PlayerInput.FindAction("CellMenu", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerInput
        private readonly InputActionMap m_PlayerInput;
        private IPlayerInputActions m_PlayerInputActionsCallbackInterface;
        private readonly InputAction m_PlayerInput_Move;
        private readonly InputAction m_PlayerInput_CloseAnyMenu;
        private readonly InputAction m_PlayerInput_CellMenu;
        public struct PlayerInputActions
        {
            private @Input m_Wrapper;
            public PlayerInputActions(@Input wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_PlayerInput_Move;
            public InputAction @CloseAnyMenu => m_Wrapper.m_PlayerInput_CloseAnyMenu;
            public InputAction @CellMenu => m_Wrapper.m_PlayerInput_CellMenu;
            public InputActionMap Get() { return m_Wrapper.m_PlayerInput; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerInputActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerInputActions instance)
            {
                if (m_Wrapper.m_PlayerInputActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnMove;
                    @CloseAnyMenu.started -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnCloseAnyMenu;
                    @CloseAnyMenu.performed -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnCloseAnyMenu;
                    @CloseAnyMenu.canceled -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnCloseAnyMenu;
                    @CellMenu.started -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnCellMenu;
                    @CellMenu.performed -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnCellMenu;
                    @CellMenu.canceled -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnCellMenu;
                }
                m_Wrapper.m_PlayerInputActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @CloseAnyMenu.started += instance.OnCloseAnyMenu;
                    @CloseAnyMenu.performed += instance.OnCloseAnyMenu;
                    @CloseAnyMenu.canceled += instance.OnCloseAnyMenu;
                    @CellMenu.started += instance.OnCellMenu;
                    @CellMenu.performed += instance.OnCellMenu;
                    @CellMenu.canceled += instance.OnCellMenu;
                }
            }
        }
        public PlayerInputActions @PlayerInput => new PlayerInputActions(this);
        private int m_MouseandKeyboardSchemeIndex = -1;
        public InputControlScheme MouseandKeyboardScheme
        {
            get
            {
                if (m_MouseandKeyboardSchemeIndex == -1) m_MouseandKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse and Keyboard");
                return asset.controlSchemes[m_MouseandKeyboardSchemeIndex];
            }
        }
        public interface IPlayerInputActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnCloseAnyMenu(InputAction.CallbackContext context);
            void OnCellMenu(InputAction.CallbackContext context);
        }
    }
}
